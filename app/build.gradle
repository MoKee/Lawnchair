import java.text.SimpleDateFormat

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def getChangelog = { ->
    File changelogFile = project.rootProject.file('changelog.txt')
    if (changelogFile.exists()) {
        def changelog = changelogFile.text
        return changelog.trim().replace("\n", "\\n").replace("\"", "\\\"")
    } else {
        return "No changelog found!"
    }
}

Properties localProps = new Properties()
File localPropsFile = project.rootProject.file('local.properties')
if (localPropsFile.exists()) {
    localProps.load(localPropsFile.newDataInputStream())
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    signingConfigs {
        travis {
            storeFile file("debug.jks")
            storePassword System.getenv("STORE_PASSWORD")
            keyAlias "Lawnchair"
            keyPassword System.getenv("KEY_PASSWORD")
        }
        mokee {
            storeFile file(CERT_STORE_PATH)
            storePassword CERT_STORE_PASSWORD
            keyAlias "mokee.keystore"
            keyPassword CERT_KEY_PASSWORD
        }
    }
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 27
        applicationId "org.mokee.lawnchair"
        buildConfigField "boolean", "TRAVIS", System.getenv("TRAVIS") ?: "false"
        buildConfigField "boolean", "TAGGED_BUILD", System.getenv("TRAVIS_TAG") ? "true" : "false"
        buildConfigField "int", "TRAVIS_BUILD_NUMBER", System.getenv("TRAVIS_BUILD_NUMBER") ?: "0"
        buildConfigField "String", "CHANGELOG", "\"${getChangelog()}\""

        ext.awarenessApiKey = localProps.getProperty('awarenessApiKey') ?: AWARENESS_API_KEY
        buildConfigField "boolean", "AWARENESS_API_ENABLED", ext.awarenessApiKey ? "true" : "false"
        manifestPlaceholders = [awarenessApiKey: ext.awarenessApiKey ?: "null"]

        buildConfigField "boolean", "ENABLE_LAWNFEED", "false"

        if (System.getenv("TRAVIS") == "true") {
            versionCode = Integer.valueOf(System.getenv("TRAVIS_BUILD_NUMBER"))
            versionName = System.getenv("MAJOR_MINOR") + (System.getenv("DRONE") ? "-" : ".") + System.getenv("TRAVIS_BUILD_NUMBER")
        } else {
            long timestamp = System.currentTimeMillis() / 1000
            versionCode Integer.valueOf(timestamp.toString())
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm")
            Date date = new Date(System.currentTimeMillis());
            versionName simpleDateFormat.format(date)
        }
    }
    buildTypes {
        debug {
            if (System.getenv("TRAVIS") == "true") {
                minifyEnabled true
                shrinkResources true
                if (System.getenv("DRONE") == "true") {
                    applicationIdSuffix ".ci"
                }

                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                if (System.getenv("TRAVIS_EVENT_TYPE") != "pull_request") {
                    signingConfig signingConfigs.travis
                }
            } else if (MOKEE_RELEASE == "true") {
                minifyEnabled true
                shrinkResources true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.mokee
                android.applicationVariants.all { variant ->
                    variant.outputs.all {
                        outputFileName = "Lawnchair.apk"
                    }
                }
            } else {
                minifyEnabled false
            }
        }
        release {
            buildConfigField "boolean", "ENABLE_LAWNFEED", "true"
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.mokee
            android.applicationVariants.all { variant ->
                variant.outputs.all {
                    outputFileName = "Lawnchair.apk"
                }
            }
        }
    }
    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    provided fileTree(include: ['*.jar'], dir: 'src/main/libs')
    def supportLibVersion = '27.0.2'
    implementation "com.android.support:support-v4:${supportLibVersion}"
    implementation "com.android.support:recyclerview-v7:${supportLibVersion}"
    implementation "com.android.support:palette-v7:${supportLibVersion}"
    implementation "com.android.support:cardview-v7:${supportLibVersion}"
    implementation "com.android.support:preference-v14:${supportLibVersion}"
    implementation "com.android.support:design:${supportLibVersion}"
    implementation "com.android.support:support-dynamic-animation:${supportLibVersion}"
    implementation 'com.github.KwabenBerko:OpenWeatherMap-Android-Library:v1.1.1'
    implementation 'com.github.stuxuhai:jpinyin:1.0'
    implementation 'com.google.android.gms:play-services-awareness:11.8.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
    implementation 'com.pavelsikun:vintage-chroma:1.5'
    implementation project(':launcherclient')
}
repositories {
    mavenCentral()
}
